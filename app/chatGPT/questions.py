class Query:
    class Question:
        def __init__(self, question: str):
            self.question = question

        def builder(self, securify: str, solhint: str, slither: str, smartcheck: str):
            return self.question % (securify, solhint, slither, smartcheck)

        def builder_details(self, securify: str, solhint: str, slither: str, smartcheck: str):
            return self.question % (securify, solhint, slither, smartcheck)

        def builder_suggestions(self, code: str, errors: str):
            return self.question % (code, errors)

        def builder_description(self, code: str):
            return self.question % (code)

    class Lang:
        PL = "PL"
        EN = "EN"

        @staticmethod
        def create_from(lang: str):
            if lang.lower() == Query.Lang.PL.lower():
                return Query.Lang.PL
            elif lang.lower() == Query.Lang.EN.lower():
                return Query.Lang.EN
            else:
                raise Exception("Invalid language")

        @staticmethod
        def map_to_full_name(lang: str):
            if lang.lower() == Query.Lang.PL.lower():
                return "Polish"
            elif lang.lower() == Query.Lang.EN.lower():
                return "English"
            else:
                raise Exception("Invalid language")

    # GENERATE_TABLE = Question(
    #     "I will provide you with outputs from smart contract frameworks Securify, SmartCheck, Slither and Solhint. Based on the provided information, generate JSON that will group the errors by the frameworks. Sometimes errors have different names but mean the same, handle it, especially smartcheck - try to rename them. Errors should be in human readable format. Take into considerations all errors. Frameworks are separated by the \"START\" and \"END\" keywords. Return frameworks names in lowercase. You should return only JSON in format: {error_name: list_of_frameworks_names} eg. {error1: [solhint, securify], error2: [slither],} .START securify: %s END, START solhint: %s END, START slither: %s END, smartcheck: %s END"
    # )

    GENERATE_TABLE = Question(
        "I will provide you with outputs from smart contract frameworks Securify, SmartCheck, Slither and Solhint. Based on the outputs from given contracts, group the common errors among the contracts by meaning and context and return in JSON format as a result {error_name: list_of_frameworks_names} eg. {Incorect solidity version: [solhint, smartcheck], function call without data: [slither],}. Take into considerations errors from every framework. Errors should be in human readable form. Sometimes errors have different names but mean the same, handle it, especially smartcheck - try to rename them. Frameworks are separated by the \"START\" and \"END\" keywords. START securify: %s END, START solhint: %s END, START slither: %s END, smartcheck: %s END"
    )
    
    GENERATE_DEATILED_TABLE = Question(
        "I will provide you with the outputs of Solidity contracts analyzed by the Securify, SmartCheck, Slither, and Solhint frameworks. return JSON format as a result {error_name: list_of_frameworks_names} eg. {Incorect solidity version: [solhint, smartcheck], function call without data: [slither],} trying to indicates that a particular framework detected the error. Be sure to consider detailed errors and warnings reported by each framework separately. Take into considerations errors from every framework. Frameworks are separated by the \"START\" and \"END\" keywords. START securify: %s END, START solhint: %s END, START slither: %s END, smartcheck: %s END"
    )
    # GENERATE_TABLE = Question(
    #     "I will provide you with outputs from smart contract frameworks Securify, SmartCheck, Slither and Solhint. Based on the provided information, generate JSON that will group the errors by the frameworks. Sometimes errors have different names but mean the same, handle it, especially smartcheck - try to rename them. Errors should be in human readable format. Take into considerations all errors. You should return only JSON in format: {error_name: list_of_frameworks_names}. securify: %s, solhint: %s, slither: %s, smartcheck: %s"
    # )
    #
    SUGGESTIONS = Question(
        "I will provide you with errors generated by smart contract test frameworks. Response should be in JSON format. Based on the outputs from given contracts prepare list of suggestions how code can be fixed. Suggestion should be in similar format like: ({suggestion: Specify the required compiler version in the source file. code_snippet: pragma solidity ^0.5.2). Add code snippets based one contract code if it is possible. Return also proposition of fixed contract code. You should return output in JSON in form {suggestions: [{suggestion: fix suggestion it should be described well, example: add fix example(if code use markdown format) it can be nullable}], fixed_code: fixed_smartcontract_code }. This is smartcontract code: %s, these are errors: %s"
    )
    DESCRIPTION = Question(
        "I will provide you a smart contract code. Describe the contract, use your knowledge on smart contracts and blockchain {%s}. If you want to mention a function, use backticks before and after function name."
    )